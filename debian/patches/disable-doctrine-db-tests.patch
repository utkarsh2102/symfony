--- a/src/Symfony/Component/Messenger/Bridge/Doctrine/Tests/Transport/DoctrineIntegrationTest.php
+++ b/src/Symfony/Component/Messenger/Bridge/Doctrine/Tests/Transport/DoctrineIntegrationTest.php
@@ -48,6 +48,7 @@
 
     public function testConnectionSendAndGet()
     {
+        $this->markTestSkipped('Test requires read-write sqlite database');
         $this->connection->send('{"message": "Hi"}', ['type' => DummyMessage::class]);
         $encoded = $this->connection->get();
         $this->assertEquals('{"message": "Hi"}', $encoded['body']);
@@ -56,6 +57,7 @@
 
     public function testSendWithDelay()
     {
+        $this->markTestSkipped('Test requires read-write sqlite database');
         $this->connection->send('{"message": "Hi i am delayed"}', ['type' => DummyMessage::class], 600000);
 
         $stmt = $this->driverConnection->createQueryBuilder()
@@ -75,6 +77,7 @@
     public function testItRetrieveTheFirstAvailableMessage()
     {
         $this->connection->setup();
+        $this->markTestSkipped('Test requires read-write sqlite database');
         // insert messages
         // one currently handled
         $this->driverConnection->insert('messenger_messages', [
@@ -109,6 +112,7 @@
     public function testItCountMessages()
     {
         $this->connection->setup();
+        $this->markTestSkipped('Test requires read-write sqlite database');
         // insert messages
         // one currently handled
         $this->driverConnection->insert('messenger_messages', [
@@ -150,6 +154,7 @@
     public function testItRetrieveTheMessageThatIsOlderThanRedeliverTimeout()
     {
         $this->connection->setup();
+        $this->markTestSkipped('Test requires read-write sqlite database');
         $twoHoursAgo = new \DateTime('now');
         $twoHoursAgo->modify('-2 hours');
         $this->driverConnection->insert('messenger_messages', [
@@ -175,6 +180,7 @@
 
     public function testTheTransportIsSetupOnGet()
     {
+        $this->markTestSkipped('Test requires read-write sqlite database');
         $this->assertFalse($this->driverConnection->getSchemaManager()->tablesExist('messenger_messages'));
         $this->assertNull($this->connection->get());
 
